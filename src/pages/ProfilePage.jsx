import {
  Container,
  Typography,
  Grid,
  Card,
  CardContent,
  Avatar,
  Box,
  Button,
  Divider,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Paper,
  useTheme,
  useMediaQuery,
  Alert
} from '@mui/material';
import {
  Person,
  Email,
  Edit,
  Security,
  Notifications,
  History,
  Settings,
  CheckCircle
} from '@mui/icons-material';
import { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { logout } from '../store/userSlice';
import ProfileEditForm from '../components/ProfileEditForm';

const menuItems = [
  { icon: <Person />, title: '–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', description: '–ò–º—è, email, –∫–æ–Ω—Ç–∞–∫—Ç—ã' },
  { icon: <Security />, title: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', description: '–ü–∞—Ä–æ–ª—å, –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è' },
  { icon: <Notifications />, title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', description: 'Email –∏ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' },
  { icon: <History />, title: '–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', description: '–ñ—É—Ä–Ω–∞–ª –≤—Ö–æ–¥–æ–≤ –∏ –¥–µ–π—Å—Ç–≤–∏–π' }
];

const achievements = [
  { title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏', description: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–µ—Ä–≤–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è', date: '2024-01-15' },
  { title: 'API –ú–∞—Å—Ç–µ—Ä', description: '–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å REST API', date: '2024-02-20' },
  { title: 'UI –î–∏–∑–∞–π–Ω–µ—Ä', description: '–°–æ–∑–¥–∞–Ω –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', date: '2024-03-10' }
];

export default function ProfilePage() {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const dispatch = useDispatch();
  const { currentUser, isAuthenticated } = useSelector((state) => state.user);
  const [isEditing, setIsEditing] = useState(false);

  const handleLogout = () => {
    dispatch(logout());
  };

  if (!isAuthenticated) {
    return (
      <Container maxWidth="md" sx={{ py: 4 }}>
        <Alert severity="warning">
          –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
        </Alert>
      </Container>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ py: 4, pb: isMobile ? 10 : 4 }}>
      <Typography variant="h4" gutterBottom>
        –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      </Typography>

      <Grid container spacing={4}>
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Grid item xs={12} md={4}>
          <Card sx={{ p: 3, textAlign: 'center' }}>
            <Avatar
              sx={{
                width: 120,
                height: 120,
                mx: 'auto',
                mb: 2,
                bgcolor: 'primary.main',
                fontSize: '3rem'
              }}
            >
              {currentUser?.name?.charAt(0)?.toUpperCase() ||
               currentUser?.login?.charAt(0)?.toUpperCase() || 'U'}
            </Avatar>

            <Typography variant="h5" gutterBottom>
              {currentUser?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
            </Typography>

            <Typography variant="body2" color="text.secondary" gutterBottom>
              @{currentUser?.login}
            </Typography>

            <Typography variant="body2" color="text.secondary" gutterBottom>
              {currentUser?.email || 'Email –Ω–µ —É–∫–∞–∑–∞–Ω'}
            </Typography>

            <Box sx={{ mt: 3, display: 'flex', gap: 1, justifyContent: 'center', flexWrap: 'wrap' }}>
              <Button
                variant="contained"
                startIcon={<Edit />}
                onClick={() => setIsEditing(true)}
                size="small"
              >
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </Button>
              <Button
                variant="outlined"
                color="error"
                onClick={handleLogout}
                size="small"
              >
                –í—ã–π—Ç–∏
              </Button>
            </Box>
          </Card>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <Card sx={{ mt: 2, p: 2 }}>
            <Typography variant="h6" gutterBottom>
              üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            </Typography>
            <List dense>
              <ListItem>
                <ListItemText
                  primary="–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                  secondary="10 –∏–∑ 10"
                />
              </ListItem>
              <ListItem>
                <ListItemText
                  primary="–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                  secondary={currentUser?.createdAt ? new Date(currentUser.createdAt).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                />
              </ListItem>
              <ListItem>
                <ListItemText
                  primary="–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
                  secondary={currentUser?.updatedAt ? new Date(currentUser.updatedAt).toLocaleDateString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                />
              </ListItem>
            </List>
          </Card>
        </Grid>

        {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Grid item xs={12} md={8}>
          {!isEditing ? (
            <>
              {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è */}
              <Card sx={{ mb: 3 }}>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
                  </Typography>

                  <List>
                    {menuItems.map((item, index) => (
                      <ListItem
                        key={index}
                        button
                        sx={{
                          borderRadius: 2,
                          mb: 1,
                          '&:hover': {
                            backgroundColor: 'action.hover'
                          }
                        }}
                      >
                        <ListItemIcon>
                          {item.icon}
                        </ListItemIcon>
                        <ListItemText
                          primary={item.title}
                          secondary={item.description}
                        />
                      </ListItem>
                    ))}
                  </List>
                </CardContent>
              </Card>

              {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                  </Typography>

                  {achievements.map((achievement, index) => (
                    <Paper
                      key={index}
                      sx={{
                        p: 2,
                        mb: 2,
                        display: 'flex',
                        alignItems: 'center',
                        bgcolor: 'success.light',
                        color: 'success.contrastText'
                      }}
                    >
                      <CheckCircle sx={{ mr: 2 }} />
                      <Box sx={{ flex: 1 }}>
                        <Typography variant="subtitle1" fontWeight="bold">
                          {achievement.title}
                        </Typography>
                        <Typography variant="body2">
                          {achievement.description}
                        </Typography>
                        <Typography variant="caption">
                          {new Date(achievement.date).toLocaleDateString('ru-RU')}
                        </Typography>
                      </Box>
                    </Paper>
                  ))}
                </CardContent>
              </Card>
            </>
          ) : (
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
                </Typography>
                <ProfileEditForm onCancel={() => setIsEditing(false)} />
              </CardContent>
            </Card>
          )}
        </Grid>
      </Grid>
    </Container>
  );
}
